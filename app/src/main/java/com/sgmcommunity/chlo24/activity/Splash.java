package com.sgmcommunity.chlo24.activity;import android.Manifest;import android.app.NotificationManager;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.content.SharedPreferences;import android.content.pm.ActivityInfo;import android.content.pm.PackageManager;import android.net.ConnectivityManager;import android.net.NetworkInfo;import android.os.Build;import android.os.Bundle;import android.os.Handler;import android.preference.PreferenceManager;import android.support.v4.content.ContextCompat;import android.support.v7.app.AlertDialog;import android.util.Log;import android.widget.Toast;import com.google.firebase.iid.FirebaseInstanceId;import com.gun0912.tedpermission.PermissionListener;import com.gun0912.tedpermission.TedPermission;import com.loopj.android.http.AsyncHttpClient;import com.loopj.android.http.JsonHttpResponseHandler;import com.loopj.android.http.PersistentCookieStore;import com.loopj.android.http.RequestParams;import com.sgmcommunity.chlo24.R;import com.sgmcommunity.chlo24.common.CommonLib;import com.sgmcommunity.chlo24.dto.MemberDTO;import org.json.JSONException;import org.json.JSONObject;import java.util.ArrayList;import cz.msebera.android.httpclient.Header;public class Splash extends CustomActivity {    private static final String TAG = Splash.class.getSimpleName();    private ConnectivityManager mManager;    private NetworkInfo mMobile;    private NetworkInfo mWifi;    private Thread networkThread;    private Handler mHandler;    private SharedPreferences mPref;    private String mToken;    private MemberDTO memberDTO;    private AsyncHttpClient mhttpClient;    private String token;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);        setContentView(R.layout.activity_splash);        mPref = PreferenceManager.getDefaultSharedPreferences(getApplicationContext());        memberDTO = new MemberDTO();        memberDTO.setUserId(mPref.getString("id", "null"));        memberDTO.setUserPw(mPref.getString("password", "null"));        mManager = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);        mMobile = mManager.getNetworkInfo(ConnectivityManager.TYPE_MOBILE);        mWifi = mManager.getNetworkInfo(ConnectivityManager.TYPE_WIFI);        if (mWifi.isConnected() || mMobile.isConnected()) {            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) { //마시멜로우 이상인지 체크                int permissionCheck = ContextCompat.checkSelfPermission(this, Manifest.permission.CAMERA);                int permissionCheck1 = ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE);                int permissionCheck2 = ContextCompat.checkSelfPermission(this, Manifest.permission.WRITE_EXTERNAL_STORAGE);                int permissionCheck3 = ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION);                int permissionCheck4 = ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION);                int permissionCheck5 = ContextCompat.checkSelfPermission(this, Manifest.permission.RECORD_AUDIO);                if (permissionCheck == PackageManager.PERMISSION_DENIED || permissionCheck1 == PackageManager.PERMISSION_DENIED || permissionCheck2 == PackageManager.PERMISSION_DENIED || permissionCheck3 == PackageManager.PERMISSION_DENIED || permissionCheck4 == PackageManager.PERMISSION_DENIED || permissionCheck5 == PackageManager.PERMISSION_DENIED) {                    permissionCheck();                } else {                    //퍼미션값 다 있으면                    Log.d(TAG, "onCreate: 퍼미션값 있음");                    sendToLogin(memberDTO.getUserId(), memberDTO.getUserPw());                }            } else {                //마시멜로우 미만                sendToLogin(memberDTO.getUserId(), memberDTO.getUserPw());            }        } else {            AlertDialog.Builder alert_confirm = new AlertDialog.Builder(Splash.this);            alert_confirm.setMessage("인터넷 연결 확인 후 재접속하시기 바랍니다.").setCancelable(false).setPositiveButton("확인",                    new DialogInterface.OnClickListener() {                        @Override                        public void onClick(DialogInterface dialog, int which) {                            finish();                        }                    });            AlertDialog alert = alert_confirm.create();            alert.show();        }        NotificationManager notificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);        notificationManager.cancel(0);    }    /**     * 스플래시화면 넘어가는 쓰레드     * 로그인 되있으면 로그인창으로 가지 않고 바로 메인화면으로 보냄     */    public void splashThread() {        mHandler = new Handler();        networkThread = new Thread(new Runnable() {            @Override            public void run() {                Log.d(TAG, "연결됨 ");                try {                    Thread.sleep(2000);                    if (!(mPref.getString("id", "null").equals("null") && mPref.getString("password", "null").equals("null"))) {                        mainIntent();                    } else {                        loginIntent();                    }                } catch (InterruptedException e) {                    e.printStackTrace();                }            }        });        networkThread.start();    }    /**     * 로그인     *     * @param userId     * @param userPassword     */    public void sendToLogin(final String userId, final String userPassword) {        mhttpClient = new AsyncHttpClient();        PersistentCookieStore myCookieStore = new PersistentCookieStore(getApplicationContext());        mhttpClient.setCookieStore(myCookieStore);        RequestParams requestParams = new RequestParams();        requestParams.put("id", userId);        requestParams.put("password", userPassword);        if (mPref.getString("token", "null").equals("null")) {            //token 값이 없을때 분기 탐            token = FirebaseInstanceId.getInstance().getToken();            requestParams.put("Token", token);            Log.d(TAG, "sendToLogin: " + "토큰값 가져옴");            //없으면 가져왔다가 있으면 안가져오니까        } else {            requestParams.put("Token", mPref.getString("token", "null"));        }        mhttpClient.post("http://www.chol24.com/android_api/login.php", requestParams, new JsonHttpResponseHandler() {            private String error;            @Override            public void onSuccess(int statusCode, Header[] headers, JSONObject response) {                super.onSuccess(statusCode, headers, response);                try {                    error = response.getString("error");                    if (error.contains("false")) { //로그인 성공//                        if(mPref.getString("id"))                        SharedPreferences.Editor editor = mPref.edit();                        editor.putString("id", userId);                        editor.putString("password", userPassword);                        //토큰값이 널일때 값 넣음                        if (mPref.getString("token", "null").equals("null")) {                            editor.putString("token", token);                        }                        editor.commit();                        Log.d(TAG, "onSuccess-------------------: " + token);//                        if (Build.VERSION.SDK_INT > Build.VERSION_CODES.LOLLIPOP) {                            CommonLib.cookieMaker(mhttpClient,getBaseContext()); //세션 웹뷰로 던져주기//                        }                    }//                } else{ //로그인 실패//                    Toast.makeText(Splash.this, "로그인에 실패했습니다.", Toast.LENGTH_SHORT).show();//                }                    splashThread();                    Log.d(TAG, "onSuccess: " + error);                } catch (                        JSONException e)                {                    Log.d(TAG, "onSuccess: 응답 메세지 없음");                }            }            @Override            public void onFailure(int statusCode, Header[] headers, String responseString, Throwable                    throwable) {                super.onFailure(statusCode, headers, responseString, throwable);                Log.d(TAG, "onFailure: 서버와 통신 실패");            }        });    }    private void loginIntent() {        Intent intent = new Intent(Splash.this, Login.class);        startActivity(intent);        finish();    }    private void mainIntent() {        Intent intent = new Intent(Splash.this, Main.class);        startActivity(intent);        finish();    }    public void permissionCheck() {        PermissionListener permissionlistener = new PermissionListener() {            @Override            public void onPermissionGranted() {//                Toast.makeText(Splash.this, "권한 부여", Toast.LENGTH_SHORT).show();                splashThread();            }            @Override            public void onPermissionDenied(ArrayList<String> deniedPermissions) {//                Toast.makeText(Splash.this, "권한 거절\n" + deniedPermissions.toString(), Toast.LENGTH_SHORT).show();                Toast.makeText(Splash.this, "권한을 거부하시면 해당 서비스를 사용할 수 없습니다.", Toast.LENGTH_SHORT).show();                finish();            }        };        new TedPermission(this)                .setPermissionListener(permissionlistener)                .setDeniedMessage("사용 권한을 거부하는 경우 이 서비스를 사용할 수 없습니다.\n\n사용 권한을 설정하십시오.[설정] > [사용 권한]")                .setPermissions(Manifest.permission.CAMERA, Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.ACCESS_FINE_LOCATION, Manifest.permission.ACCESS_COARSE_LOCATION, Manifest.permission.RECORD_AUDIO)                .check();    }}